name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      draft:
        description: 'Create as draft release'
        required: false
        default: false
        type: boolean
      prerelease:
        description: 'Mark as prerelease'
        required: false
        default: false
        type: boolean

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Validate release prerequisites
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Determine version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${{ github.ref_name }}"
        fi
        
        # Remove 'v' prefix if present
        VERSION=${VERSION#v}
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Check if this is a prerelease (contains alpha, beta, rc, etc.)
        if [[ "$VERSION" =~ (alpha|beta|rc|dev|nightly) ]]; then
          echo "is-prerelease=true" >> $GITHUB_OUTPUT
        else
          echo "is-prerelease=false" >> $GITHUB_OUTPUT
        fi
        
        echo "Release version: $VERSION"

    - name: Validate version format
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+(\.[a-zA-Z0-9]+)*)?$ ]]; then
          echo "❌ Invalid version format: $VERSION"
          echo "Expected format: X.Y.Z or X.Y.Z-suffix"
          exit 1
        fi
        echo "✅ Version format is valid: $VERSION"

    - name: Check if tag exists
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        if git tag | grep -q "^v$VERSION$"; then
          echo "❌ Tag v$VERSION already exists"
          exit 1
        fi
        echo "✅ Tag v$VERSION is available"

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Validate Cargo.toml versions
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        
        # Check each crate's version
        for crate_dir in crates/*; do
          if [[ -f "$crate_dir/Cargo.toml" ]]; then
            crate_name=$(basename "$crate_dir")
            crate_version=$(cargo metadata --manifest-path "$crate_dir/Cargo.toml" --format-version 1 | jq -r '.packages[0].version')
            
            echo "Checking $crate_name: $crate_version"
            
            if [[ "$crate_version" != "$VERSION" ]]; then
              echo "❌ Version mismatch in $crate_name: expected $VERSION, found $crate_version"
              exit 1
            fi
          fi
        done
        
        echo "✅ All crate versions match release version"

  # Run full test suite before release
  test-release:
    name: Pre-release Testing
    needs: validate
    uses: ./.github/workflows/ci.yml

  # Build release binaries for all platforms
  build:
    name: Build Release Binaries
    needs: [validate, test-release]
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux targets
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: rustex-linux-x86_64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: rustex-linux-aarch64
          
          # Windows targets
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: rustex-windows-x86_64.exe
          
          # macOS targets
          - target: x86_64-apple-darwin
            os: macos-latest
            name: rustex-macos-x86_64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: rustex-macos-aarch64

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Setup cross compilation (Linux)
      if: matrix.os == 'ubuntu-latest' && matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu
        echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        key: release-${{ matrix.target }}

    - name: Build release binary
      run: |
        cargo build --release --target ${{ matrix.target }} --bin rustex

    - name: Strip binary (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        strip target/${{ matrix.target }}/release/rustex

    - name: Create release package
      shell: bash
      run: |
        VERSION="${{ needs.validate.outputs.version }}"
        
        # Create package directory
        mkdir -p "rustex-$VERSION-${{ matrix.target }}"
        
        # Copy binary
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          cp "target/${{ matrix.target }}/release/rustex.exe" "rustex-$VERSION-${{ matrix.target }}/"
        else
          cp "target/${{ matrix.target }}/release/rustex" "rustex-$VERSION-${{ matrix.target }}/"
        fi
        
        # Copy additional files
        cp README.md "rustex-$VERSION-${{ matrix.target }}/"
        cp LICENSE* "rustex-$VERSION-${{ matrix.target }}/" 2>/dev/null || true
        
        # Create installation script
        cat > "rustex-$VERSION-${{ matrix.target }}/install.sh" << 'EOF'
        #!/bin/bash
        # RustEx Installation Script
        
        set -e
        
        INSTALL_DIR="${HOME}/.local/bin"
        BINARY_NAME="rustex"
        
        if [[ "$OSTYPE" == "msys" ]] || [[ "$OSTYPE" == "win32" ]]; then
          BINARY_NAME="rustex.exe"
          INSTALL_DIR="${APPDATA}/rustex/bin"
        fi
        
        echo "Installing RustEx to $INSTALL_DIR"
        
        # Create install directory
        mkdir -p "$INSTALL_DIR"
        
        # Copy binary
        cp "$BINARY_NAME" "$INSTALL_DIR/"
        chmod +x "$INSTALL_DIR/$BINARY_NAME"
        
        echo "✅ RustEx installed successfully!"
        echo "Add $INSTALL_DIR to your PATH to use rustex from anywhere."
        EOF
        
        chmod +x "rustex-$VERSION-${{ matrix.target }}/install.sh"
        
        # Create archive
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          7z a "rustex-$VERSION-${{ matrix.target }}.zip" "rustex-$VERSION-${{ matrix.target }}/"
        else
          tar -czf "rustex-$VERSION-${{ matrix.target }}.tar.gz" "rustex-$VERSION-${{ matrix.target }}/"
        fi

    - name: Generate checksums
      shell: bash
      run: |
        VERSION="${{ needs.validate.outputs.version }}"
        
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          ARCHIVE="rustex-$VERSION-${{ matrix.target }}.zip"
          sha256sum "$ARCHIVE" > "$ARCHIVE.sha256"
        else
          ARCHIVE="rustex-$VERSION-${{ matrix.target }}.tar.gz"
          sha256sum "$ARCHIVE" > "$ARCHIVE.sha256"
        fi

    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-${{ matrix.target }}
        path: rustex-${{ needs.validate.outputs.version }}-${{ matrix.target }}.*
        retention-days: 7

  # Build and publish crates
  publish-crates:
    name: Publish to crates.io
    needs: [validate, test-release]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || !github.event.inputs.draft

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2

    - name: Login to crates.io
      run: cargo login ${{ secrets.CARGO_REGISTRY_TOKEN }}

    - name: Publish crates in dependency order
      run: |
        VERSION="${{ needs.validate.outputs.version }}"
        
        echo "Publishing RustEx v$VERSION to crates.io..."
        
        # Publish in dependency order
        echo "📦 Publishing rustex-core..."
        cd crates/rustex-core
        cargo publish --dry-run
        cargo publish
        cd ../..
        
        # Wait for rustex-core to be available
        echo "⏳ Waiting for rustex-core to be available on crates.io..."
        sleep 30
        
        echo "📦 Publishing rustex-formats..."
        cd crates/rustex-formats
        cargo publish --dry-run
        cargo publish
        cd ../..
        
        sleep 15
        
        echo "📦 Publishing rustex-plugins..."
        cd crates/rustex-plugins
        cargo publish --dry-run
        cargo publish
        cd ../..
        
        sleep 15
        
        echo "📦 Publishing rustex-cli..."
        cd crates/rustex-cli
        cargo publish --dry-run
        cargo publish
        cd ../..
        
        echo "✅ All crates published successfully!"

  # Create GitHub release
  create-release:
    name: Create GitHub Release
    needs: [validate, build, publish-crates]
    runs-on: ubuntu-latest
    if: always() && needs.validate.result == 'success' && needs.build.result == 'success'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./release-artifacts

    - name: Generate release notes
      id: release-notes
      run: |
        VERSION="${{ needs.validate.outputs.version }}"
        
        # Generate changelog from git history if CHANGELOG.md doesn't exist
        if [[ ! -f CHANGELOG.md ]]; then
          echo "# Release Notes for v$VERSION" > release_notes.md
          echo "" >> release_notes.md
          
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [[ -n "$LAST_TAG" ]]; then
            echo "## Changes since $LAST_TAG" >> release_notes.md
            echo "" >> release_notes.md
            git log --pretty=format:"- %s (%h)" "$LAST_TAG..HEAD" >> release_notes.md
          else
            echo "## Initial Release" >> release_notes.md
            echo "" >> release_notes.md
            echo "🎉 First release of RustEx - Advanced Rust AST extraction for LLM/RAG applications!" >> release_notes.md
            echo "" >> release_notes.md
            echo "### Features" >> release_notes.md
            echo "- Complete AST extraction for Rust projects" >> release_notes.md
            echo "- Advanced complexity calculation algorithms" >> release_notes.md
            echo "- Multiple output formats (JSON, MessagePack, Markdown, RAG)" >> release_notes.md
            echo "- Comprehensive configuration system" >> release_notes.md
            echo "- High-performance parsing with excellent error handling" >> release_notes.md
          fi
        else
          # Extract relevant section from CHANGELOG.md
          awk "/^## \[?v?$VERSION\]?/,/^## \[?v?[0-9]/" CHANGELOG.md | head -n -1 > release_notes.md
        fi
        
        echo "" >> release_notes.md
        echo "## 📦 Installation" >> release_notes.md
        echo "" >> release_notes.md
        echo "### Binary Releases" >> release_notes.md
        echo "Download the appropriate binary for your platform from the assets below." >> release_notes.md
        echo "" >> release_notes.md
        echo "### Cargo" >> release_notes.md
        echo '```bash' >> release_notes.md
        echo "cargo install rustex-cli" >> release_notes.md
        echo '```' >> release_notes.md
        echo "" >> release_notes.md
        echo "## 🚀 Quick Start" >> release_notes.md
        echo '```bash' >> release_notes.md
        echo "# Extract AST from a Rust project" >> release_notes.md
        echo "rustex extract --format json --pretty" >> release_notes.md
        echo '```' >> release_notes.md
        echo "" >> release_notes.md
        echo "## 📊 Performance" >> release_notes.md
        echo "- AST Parsing: 8-18 MiB/s throughput" >> release_notes.md
        echo "- Complexity Calculation: <10μs per function" >> release_notes.md
        echo "- Memory Efficient: Linear scaling with project size" >> release_notes.md
        echo "" >> release_notes.md
        echo "## 🔍 Verification" >> release_notes.md
        echo "All release assets include SHA256 checksums for verification." >> release_notes.md

    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.validate.outputs.version }}
        name: RustEx v${{ needs.validate.outputs.version }}
        body_path: release_notes.md
        draft: ${{ github.event.inputs.draft || false }}
        prerelease: ${{ needs.validate.outputs.is-prerelease == 'true' || github.event.inputs.prerelease || false }}
        files: |
          release-artifacts/**/*
        generate_release_notes: false
        fail_on_unmatched_files: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Publish Docker images
  publish-docker:
    name: Publish Docker Images
    needs: [validate, build]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || !github.event.inputs.draft

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Linux x86_64 artifact
      uses: actions/download-artifact@v4
      with:
        name: release-x86_64-unknown-linux-gnu
        path: ./docker-build

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          rustex/rustex
          ghcr.io/${{ github.repository }}
        tags: |
          type=semver,pattern={{version}},value=v${{ needs.validate.outputs.version }}
          type=semver,pattern={{major}}.{{minor}},value=v${{ needs.validate.outputs.version }}
          type=semver,pattern={{major}},value=v${{ needs.validate.outputs.version }}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Create Dockerfile
      run: |
        cat > Dockerfile << 'EOF'
        FROM debian:bookworm-slim
        
        RUN apt-get update && apt-get install -y \
          ca-certificates \
          && rm -rf /var/lib/apt/lists/*
        
        COPY rustex /usr/local/bin/rustex
        RUN chmod +x /usr/local/bin/rustex
        
        WORKDIR /workspace
        
        ENTRYPOINT ["rustex"]
        CMD ["--help"]
        EOF

    - name: Build and push Docker images
      uses: docker/build-push-action@v5
      with:
        context: ./docker-build
        file: ./Dockerfile
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Update documentation
  update-docs:
    name: Update Documentation
    needs: [validate, create-release]
    runs-on: ubuntu-latest
    if: needs.create-release.result == 'success'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Update version badges
      run: |
        VERSION="${{ needs.validate.outputs.version }}"
        
        # Update README.md badges
        sed -i "s/rustex-[0-9]\+\.[0-9]\+\.[0-9]\+/rustex-$VERSION/g" README.md
        sed -i "s/v[0-9]\+\.[0-9]\+\.[0-9]\+/v$VERSION/g" README.md

    - name: Commit documentation updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        if git diff --quiet; then
          echo "No documentation updates needed"
        else
          git add README.md
          git commit -m "docs: update version badges to v${{ needs.validate.outputs.version }}"
          git push
        fi

  # Notify on release completion
  notify:
    name: Release Notification
    needs: [validate, create-release, publish-crates, publish-docker]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Create release summary
      run: |
        VERSION="${{ needs.validate.outputs.version }}"
        
        echo "# 🚀 RustEx v$VERSION Release Summary" > release_summary.md
        echo "" >> release_summary.md
        echo "## Status Overview" >> release_summary.md
        echo "- **GitHub Release**: ${{ needs.create-release.result }}" >> release_summary.md
        echo "- **Crates.io**: ${{ needs.publish-crates.result }}" >> release_summary.md
        echo "- **Docker**: ${{ needs.publish-docker.result }}" >> release_summary.md
        echo "" >> release_summary.md
        
        if [[ "${{ needs.create-release.result }}" == "success" ]]; then
          echo "✅ Release v$VERSION has been successfully published!" >> release_summary.md
          echo "" >> release_summary.md
          echo "## 📦 Available Packages" >> release_summary.md
          echo "- **GitHub Releases**: Binary downloads for all platforms" >> release_summary.md
          
          if [[ "${{ needs.publish-crates.result }}" == "success" ]]; then
            echo "- **crates.io**: \`cargo install rustex-cli\`" >> release_summary.md
          fi
          
          if [[ "${{ needs.publish-docker.result }}" == "success" ]]; then
            echo "- **Docker**: \`docker pull rustex/rustex:$VERSION\`" >> release_summary.md
          fi
          
          echo "" >> release_summary.md
          echo "## 🎯 Next Steps" >> release_summary.md
          echo "- Update announcement channels" >> release_summary.md
          echo "- Monitor for any post-release issues" >> release_summary.md
          echo "- Begin planning next release cycle" >> release_summary.md
        else
          echo "❌ Release process encountered issues. Please check the workflow logs." >> release_summary.md
        fi

    - name: Upload release summary
      uses: actions/upload-artifact@v4
      with:
        name: release-summary
        path: release_summary.md
        retention-days: 30